h2. Stashing

Stashing is a pretty simple concept that is incredibly useful and very easy to use.  If you are working on your code and you need to switch to another branch for some reason and don't want to commit your current state because it is only partially completed, you can run @git stash@, which will basically take the changes from your last commit to the current state of your working directory and store it temporarily.

In the following example, I have a change to my 'lib/simplegit.rb' file, but it's not complete.

shell. stash.txt

Now I can see that my working directory is clean, as if I had committed, but I did not.  Now I can switch branches, work for a while somewhere else, then switch back. So where did that change go?  How do I get it back?  Well, I can see my stashes by running @git stash list@.

shell. stash-list.txt

I see I have two stashes on the 'master' branch, both saved off of working from the same commit, and I have one stashed change off the 'experiment' branch.  However, I can't remember which stash was the one I want, so I can use @git stash show@ to figure it out.

shell. stash-show.txt

I can also use any normal git tools that will take a tree on it, for instance, @git diff@:

shell. stash-diff.txt

And finally, I can apply it:

shell. stash-apply.txt

Now we can see that our working directory is back to where it was, with one file in an unstaged state.  Now I would have to @git add@ and @git commit@ it if I wanted to keep the change. 

Normally it's not even this complicated.  If you run @git stash apply@ without the actual stash reference, it will just apply the last stash you saved on that branch.  Normally I will just use @git stash@ to save something, go work elsewhere, then come back and run @git stash apply@ to get back to where I was.

* "git stash":http://www.kernel.org/pub/software/scm/git/docs/git-stash.html
